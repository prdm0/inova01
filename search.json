[
  {
    "objectID": "assets/modelo_teresina.html#olhando-para-os-dados",
    "href": "assets/modelo_teresina.html#olhando-para-os-dados",
    "title": "Construindo um modelo e API para previs√£o dos pre√ßos de im√≥veis em Teresina - PI",
    "section": "Olhando para os dados",
    "text": "Olhando para os dados\nS√£o dados reais, obtidos via web scraping do site Zap Im√≥veis üè°üè¢ no ano de 2023 do munic√≠pio de Teresina, Piau√≠, Brasil.\nVoc√™ poder√° acessar os dados clicando AQUI üíæ.\n\nlibrary(vroom) # Leitura dos dados\nlibrary(janitor) # Limpando nomes das colunas\nlibrary(dplyr) # Manipula√ß√£o de dados\n\n# Base de dados dos im√≥veis anuanciados em Teresina (2023)\ndados &lt;- vroom::vroom(\"teresina.csv\") |&gt;\n  janitor::clean_names() # Organizando os nomes das colunas\n\n# Visualizando os dados com o comando glimpse\ndplyr::glimpse(dados)\n\nRows: 8,104\nColumns: 27\n$ id                        &lt;dbl&gt; 2628381702, 2632203837, 2569578780, 26263159‚Ä¶\n$ endereco                  &lt;chr&gt; \"Aeroporto\", \"Aeroporto\", \"Aeroporto\", \"Pra+‚Ä¶\n$ valor                     &lt;dbl&gt; 550000, 700000, 250000, 370000, 700000, 7000‚Ä¶\n$ area                      &lt;dbl&gt; 500, 146, 250, 220, 200, 200, 200, 200, 200,‚Ä¶\n$ iptu                      &lt;dbl&gt; NA, NA, NA, 1, 1, 1, 1, 1, 1, 1, 1, NA, NA, ‚Ä¶\n$ condominio                &lt;dbl&gt; NA, NA, NA, 1, 300, NA, 450, 400, 500, 350, ‚Ä¶\n$ quarto                    &lt;dbl&gt; 2, 3, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 3,‚Ä¶\n$ vaga                      &lt;dbl&gt; 1, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2, 5, 4, 2, 2,‚Ä¶\n$ banheiro                  &lt;dbl&gt; 2, 4, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3,‚Ä¶\n$ url                       &lt;chr&gt; \"https://www.zapimoveis.com.br/venda/casas/p‚Ä¶\n$ bairro                    &lt;chr&gt; \"aeroporto\", \"aeroporto\", \"aeroporto\", \"aero‚Ä¶\n$ tipo                      &lt;chr&gt; \"casas\", \"casas\", \"casas\", \"casas\", \"casas\",‚Ä¶\n$ area_af8_servico          &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FAL‚Ä¶\n$ espaco_af8_gourmet        &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ piscina                   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE‚Ä¶\n$ elevador                  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ salao_af8_de_af8_festa    &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ academia                  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ playground                &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ quadra_af8_de_af8_esporte &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ portaria_af8_24_af8_horas &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ varanda_af8_gourmet       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FAL‚Ä¶\n$ sauna                     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ spa                       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ comercio                  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA‚Ä¶\n$ latitude                  &lt;chr&gt; \"+AC0-5.06564999999995\", \"+AC0-5.06564999999‚Ä¶\n$ longitude                 &lt;chr&gt; \"+AC0-42.8164599999999\", \"+AC0-42.8164599999‚Ä¶\n\n\nVamos agora visualizar os dados de uma forma que facilite a compreens√£o.\n\nlibrary(visdat)\nlibrary(dplyr)\n# Visualizando os dados (tipo, estrutura e valores ausentes)\nvisdat::vis_dat(dados)\n\n\n\n\n\n\n\n# Selecionando apenas as vari√°veis num√©ricas\ndados |&gt;\n  dplyr::select(where(is.numeric)) |&gt;\n  visdat::vis_cor(digits = 2, sort = TRUE)\n\n\n\n\n\n\n\n\nVamos observar os tipos de im√≥veis na vari√°vel tipo e fazer uma contagem nos tipos dispon√≠veis:\n\n\nCode\n# Tabela com a quantidade de tipos de im√≥veis\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Contagem de tipos de im√≥veis\ntipos_imoveis &lt;-\n  dados |&gt;\n  dplyr::count(tipo) |&gt;\n  dplyr::arrange(desc(n))\n\n# Verificando os tipos de im√≥veis\np1 &lt;-\n  tipos_imoveis[1:4, ] |&gt;\n  dplyr::arrange(desc(n)) |&gt;\n  dplyr::mutate(tipo = forcats::fct_reorder(tipo, n)) |&gt;\n  ggplot(aes(x = tipo, y = n)) +\n  geom_col(aes(fill = n)) +\n  coord_flip() +\n  geom_text(\n    aes(label = n),\n    position = position_stack(vjust = 0.5),\n    color = \"white\",\n    size = 5\n  ) +\n  labs(\n    title = \"Tipos de im√≥veis em Teresina - PI\",\n    x = \"Tipo de im√≥vel\",\n    y = \"Quantidade\"\n  ) +\n  theme_linedraw()\n# Gr√°fico com os tipos de im√≥veis\nprint(p1)\n\n\n\n\n\n\n\n\n\nCode\n# Tabela com os tipos de im√≥veis\nprint(tipos_imoveis)\n\n\n# A tibble: 6 √ó 2\n  tipo                                  n\n  &lt;chr&gt;                             &lt;int&gt;\n1 apartamentos                       4804\n2 casas                              1575\n3 casas+AF8-de+AF8-condominio        1293\n4 terrenos+AF8-lotes+AF8-condominio   423\n5 flat                                  8\n6 casas+AF8-de+AF8-vila                 1\n\n\nObserva-se que as informa√ß√µes do iptu e condiminio s√£o muito incipientes, e talvez, inputar essas informa√ß√µes n√£o seja uma boa ideia, pois pode gerar um vi√©s no modelo. Vamos descartar essas vari√°veis.\nLista de veri√°veis que ser√£o descartadas:\n\nendere√ßo: j√° h√° o georeferenciamento dos im√≥veis\nurl: sem utilidade para a previs√£o\nbairro: j√° h√° o georeferenciamento dos im√≥veis\niptu: muitas observa√ß√µes faltantes\ncondominio: muitas observa√ß√µes faltantes\n\nüìå Observa√ß√µes:\n\nser√° considerada a vari√°vel vaga e utilizaremos imputa√ß√£o de dados, uma vez que n√£o h√° muitas observa√ß√µes faltantes. Al√©m disso, focaremos em construir um modelo para previs√£o de valores de casas üè° e apartamentos üè¢.\ncasa = casas + casas_de_condimonio + casas_de_vila\napartamento = apartamentos + flat\n\n\n# Dados gerais com a remo√ß√£o das vari√°veis que n√£o ser√£o utilizadas\ndados &lt;- dados |&gt;\n  dplyr::select(\n    -iptu,\n    -condominio,\n    -endereco,\n    -url,\n    -bairro\n  )\n\n# Agrupando casas = casas + casas_de_condimonio + casas_de_vila e\n# apartamentos = apartamentos + flat\ndados &lt;- dados |&gt;\n  dplyr::mutate(\n    tipo = dplyr::case_when(\n      tipo == \"casas\" ~ \"casa\",\n      tipo == \"casas_de_condiminio\" ~ \"casa\",\n      tipo == \"casas_de_vila\" ~ \"casa\",\n      tipo == \"apartamentos\" ~ \"apartamento\",\n      tipo == \"flat\" ~ \"apartamento\",\n      TRUE ~ tipo # Se houver outro tipo, manter o mesmo valor\n    )\n  ) |&gt;\n  dplyr::filter(tipo %in% c(\"casa\", \"apartamento\"))\n\n# Contagem de tipos de im√≥veis\ntipos_imoveis &lt;-\n  dados |&gt;\n  dplyr::count(tipo) |&gt;\n  dplyr::arrange(desc(n))\n\nprint(tipos_imoveis)\n\n# A tibble: 2 √ó 2\n  tipo            n\n  &lt;chr&gt;       &lt;int&gt;\n1 apartamento  4812\n2 casa         1575"
  }
]